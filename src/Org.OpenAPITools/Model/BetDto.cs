/*
 * BetMonitor for generating matches and Odds
 *
 * The server for simulating a betting portal.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// BetDto
    /// </summary>
    [DataContract(Name = "bet-dto")]
    public partial class BetDto : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public BetStatusDto Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BetDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BetDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BetDto" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="updatedAt">updatedAt.</param>
        /// <param name="stake">stake (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="toReturn">toReturn.</param>
        /// <param name="marketState">marketState.</param>
        public BetDto(long id = default(long), DateTime createdAt = default(DateTime), DateTime updatedAt = default(DateTime), int stake = default(int), BetStatusDto status = default(BetStatusDto), float toReturn = default(float), MarketStateDto marketState = default(MarketStateDto))
        {
            this.Id = id;
            this.Stake = stake;
            this.Status = status;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            this.ToReturn = toReturn;
            this.MarketState = marketState;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Stake
        /// </summary>
        [DataMember(Name = "stake", IsRequired = true, EmitDefaultValue = true)]
        public int Stake { get; set; }

        /// <summary>
        /// Gets or Sets ToReturn
        /// </summary>
        [DataMember(Name = "toReturn", EmitDefaultValue = false)]
        public float ToReturn { get; set; }

        /// <summary>
        /// Gets or Sets MarketState
        /// </summary>
        [DataMember(Name = "marketState", EmitDefaultValue = false)]
        public MarketStateDto MarketState { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BetDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Stake: ").Append(Stake).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ToReturn: ").Append(ToReturn).Append("\n");
            sb.Append("  MarketState: ").Append(MarketState).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Stake (int) minimum
            if (this.Stake < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Stake, must be a value greater than or equal to 0.", new [] { "Stake" });
            }

            yield break;
        }
    }

}
