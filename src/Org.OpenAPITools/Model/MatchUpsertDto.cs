/*
 * BetMonitor for generating matches and Odds
 *
 * The server for simulating a betting portal.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Match between players with markets.
    /// </summary>
    [DataContract(Name = "match-upsert-dto")]
    public partial class MatchUpsertDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MatchUpsertDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MatchUpsertDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MatchUpsertDto" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name (required).</param>
        /// <param name="live">live (required).</param>
        /// <param name="league">league (required).</param>
        /// <param name="sport">sport (required).</param>
        /// <param name="playerIds">playerIds (required).</param>
        /// <param name="matchState">matchState (required).</param>
        public MatchUpsertDto(long id = default(long), string name = default(string), bool live = default(bool), LeagueDto league = default(LeagueDto), SportDto sport = default(SportDto), List<long> playerIds = default(List<long>), MatchUpsertDtoMatchState matchState = default(MatchUpsertDtoMatchState))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for MatchUpsertDto and cannot be null");
            }
            this.Name = name;
            this.Live = live;
            // to ensure "league" is required (not null)
            if (league == null)
            {
                throw new ArgumentNullException("league is a required property for MatchUpsertDto and cannot be null");
            }
            this.League = league;
            // to ensure "sport" is required (not null)
            if (sport == null)
            {
                throw new ArgumentNullException("sport is a required property for MatchUpsertDto and cannot be null");
            }
            this.Sport = sport;
            // to ensure "playerIds" is required (not null)
            if (playerIds == null)
            {
                throw new ArgumentNullException("playerIds is a required property for MatchUpsertDto and cannot be null");
            }
            this.PlayerIds = playerIds;
            // to ensure "matchState" is required (not null)
            if (matchState == null)
            {
                throw new ArgumentNullException("matchState is a required property for MatchUpsertDto and cannot be null");
            }
            this.MatchState = matchState;
            this.Id = id;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Live
        /// </summary>
        [DataMember(Name = "live", IsRequired = true, EmitDefaultValue = true)]
        public bool Live { get; set; }

        /// <summary>
        /// Gets or Sets League
        /// </summary>
        [DataMember(Name = "league", IsRequired = true, EmitDefaultValue = true)]
        public LeagueDto League { get; set; }

        /// <summary>
        /// Gets or Sets Sport
        /// </summary>
        [DataMember(Name = "sport", IsRequired = true, EmitDefaultValue = true)]
        public SportDto Sport { get; set; }

        /// <summary>
        /// Gets or Sets PlayerIds
        /// </summary>
        [DataMember(Name = "playerIds", IsRequired = true, EmitDefaultValue = true)]
        public List<long> PlayerIds { get; set; }

        /// <summary>
        /// Gets or Sets MatchState
        /// </summary>
        [DataMember(Name = "matchState", IsRequired = true, EmitDefaultValue = true)]
        public MatchUpsertDtoMatchState MatchState { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MatchUpsertDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Live: ").Append(Live).Append("\n");
            sb.Append("  League: ").Append(League).Append("\n");
            sb.Append("  Sport: ").Append(Sport).Append("\n");
            sb.Append("  PlayerIds: ").Append(PlayerIds).Append("\n");
            sb.Append("  MatchState: ").Append(MatchState).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
