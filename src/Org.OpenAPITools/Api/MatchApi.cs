/*
 * BetMonitor for generating matches and Odds
 *
 * The server for simulating a betting portal.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMatchApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new match
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_XSRF_TOKEN"></param>
        /// <param name="matchUpsertDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MatchDto</returns>
        MatchDto CreateMatch(string X_XSRF_TOKEN, MatchUpsertDto matchUpsertDto, int operationIndex = 0);

        /// <summary>
        /// Create a new match
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_XSRF_TOKEN"></param>
        /// <param name="matchUpsertDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MatchDto</returns>
        ApiResponse<MatchDto> CreateMatchWithHttpInfo(string X_XSRF_TOKEN, MatchUpsertDto matchUpsertDto, int operationIndex = 0);
        /// <summary>
        /// Get match on id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of match to return.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MatchDto</returns>
        MatchDto GetMatchById(long id, int operationIndex = 0);

        /// <summary>
        /// Get match on id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of match to return.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MatchDto</returns>
        ApiResponse<MatchDto> GetMatchByIdWithHttpInfo(long id, int operationIndex = 0);
        /// <summary>
        /// Update a live match with a new matchState
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_XSRF_TOKEN"></param>
        /// <param name="id">Id of match to update.</param>
        /// <param name="matchUpsertDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateMatchAndStates(string X_XSRF_TOKEN, long id, MatchUpsertDto matchUpsertDto, int operationIndex = 0);

        /// <summary>
        /// Update a live match with a new matchState
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_XSRF_TOKEN"></param>
        /// <param name="id">Id of match to update.</param>
        /// <param name="matchUpsertDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateMatchAndStatesWithHttpInfo(string X_XSRF_TOKEN, long id, MatchUpsertDto matchUpsertDto, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMatchApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a new match
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_XSRF_TOKEN"></param>
        /// <param name="matchUpsertDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MatchDto</returns>
        System.Threading.Tasks.Task<MatchDto> CreateMatchAsync(string X_XSRF_TOKEN, MatchUpsertDto matchUpsertDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new match
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_XSRF_TOKEN"></param>
        /// <param name="matchUpsertDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MatchDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<MatchDto>> CreateMatchWithHttpInfoAsync(string X_XSRF_TOKEN, MatchUpsertDto matchUpsertDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get match on id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of match to return.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MatchDto</returns>
        System.Threading.Tasks.Task<MatchDto> GetMatchByIdAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get match on id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of match to return.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MatchDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<MatchDto>> GetMatchByIdWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a live match with a new matchState
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_XSRF_TOKEN"></param>
        /// <param name="id">Id of match to update.</param>
        /// <param name="matchUpsertDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateMatchAndStatesAsync(string X_XSRF_TOKEN, long id, MatchUpsertDto matchUpsertDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a live match with a new matchState
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_XSRF_TOKEN"></param>
        /// <param name="id">Id of match to update.</param>
        /// <param name="matchUpsertDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateMatchAndStatesWithHttpInfoAsync(string X_XSRF_TOKEN, long id, MatchUpsertDto matchUpsertDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMatchApi : IMatchApiSync, IMatchApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MatchApi : IMatchApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MatchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MatchApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MatchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MatchApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MatchApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MatchApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MatchApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MatchApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a new match 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_XSRF_TOKEN"></param>
        /// <param name="matchUpsertDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MatchDto</returns>
        public MatchDto CreateMatch(string X_XSRF_TOKEN, MatchUpsertDto matchUpsertDto, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<MatchDto> localVarResponse = CreateMatchWithHttpInfo(X_XSRF_TOKEN, matchUpsertDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new match 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_XSRF_TOKEN"></param>
        /// <param name="matchUpsertDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MatchDto</returns>
        public Org.OpenAPITools.Client.ApiResponse<MatchDto> CreateMatchWithHttpInfo(string X_XSRF_TOKEN, MatchUpsertDto matchUpsertDto, int operationIndex = 0)
        {
            // verify the required parameter 'X_XSRF_TOKEN' is set
            if (X_XSRF_TOKEN == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_XSRF_TOKEN' when calling MatchApi->CreateMatch");
            }

            // verify the required parameter 'matchUpsertDto' is set
            if (matchUpsertDto == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'matchUpsertDto' when calling MatchApi->CreateMatch");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("X-XSRF-TOKEN", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_XSRF_TOKEN)); // header parameter
            localVarRequestOptions.Data = matchUpsertDto;

            localVarRequestOptions.Operation = "MatchApi.CreateMatch";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<MatchDto>("/match", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new match 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_XSRF_TOKEN"></param>
        /// <param name="matchUpsertDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MatchDto</returns>
        public async System.Threading.Tasks.Task<MatchDto> CreateMatchAsync(string X_XSRF_TOKEN, MatchUpsertDto matchUpsertDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<MatchDto> localVarResponse = await CreateMatchWithHttpInfoAsync(X_XSRF_TOKEN, matchUpsertDto, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new match 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_XSRF_TOKEN"></param>
        /// <param name="matchUpsertDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MatchDto)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<MatchDto>> CreateMatchWithHttpInfoAsync(string X_XSRF_TOKEN, MatchUpsertDto matchUpsertDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'X_XSRF_TOKEN' is set
            if (X_XSRF_TOKEN == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_XSRF_TOKEN' when calling MatchApi->CreateMatch");
            }

            // verify the required parameter 'matchUpsertDto' is set
            if (matchUpsertDto == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'matchUpsertDto' when calling MatchApi->CreateMatch");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("X-XSRF-TOKEN", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_XSRF_TOKEN)); // header parameter
            localVarRequestOptions.Data = matchUpsertDto;

            localVarRequestOptions.Operation = "MatchApi.CreateMatch";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<MatchDto>("/match", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get match on id. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of match to return.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MatchDto</returns>
        public MatchDto GetMatchById(long id, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<MatchDto> localVarResponse = GetMatchByIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get match on id. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of match to return.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MatchDto</returns>
        public Org.OpenAPITools.Client.ApiResponse<MatchDto> GetMatchByIdWithHttpInfo(long id, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "MatchApi.GetMatchById";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<MatchDto>("/match/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMatchById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get match on id. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of match to return.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MatchDto</returns>
        public async System.Threading.Tasks.Task<MatchDto> GetMatchByIdAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<MatchDto> localVarResponse = await GetMatchByIdWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get match on id. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of match to return.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MatchDto)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<MatchDto>> GetMatchByIdWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "MatchApi.GetMatchById";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MatchDto>("/match/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMatchById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a live match with a new matchState 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_XSRF_TOKEN"></param>
        /// <param name="id">Id of match to update.</param>
        /// <param name="matchUpsertDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateMatchAndStates(string X_XSRF_TOKEN, long id, MatchUpsertDto matchUpsertDto, int operationIndex = 0)
        {
            UpdateMatchAndStatesWithHttpInfo(X_XSRF_TOKEN, id, matchUpsertDto);
        }

        /// <summary>
        /// Update a live match with a new matchState 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_XSRF_TOKEN"></param>
        /// <param name="id">Id of match to update.</param>
        /// <param name="matchUpsertDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> UpdateMatchAndStatesWithHttpInfo(string X_XSRF_TOKEN, long id, MatchUpsertDto matchUpsertDto, int operationIndex = 0)
        {
            // verify the required parameter 'X_XSRF_TOKEN' is set
            if (X_XSRF_TOKEN == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_XSRF_TOKEN' when calling MatchApi->UpdateMatchAndStates");
            }

            // verify the required parameter 'matchUpsertDto' is set
            if (matchUpsertDto == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'matchUpsertDto' when calling MatchApi->UpdateMatchAndStates");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-XSRF-TOKEN", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_XSRF_TOKEN)); // header parameter
            localVarRequestOptions.Data = matchUpsertDto;

            localVarRequestOptions.Operation = "MatchApi.UpdateMatchAndStates";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/match/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMatchAndStates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a live match with a new matchState 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_XSRF_TOKEN"></param>
        /// <param name="id">Id of match to update.</param>
        /// <param name="matchUpsertDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateMatchAndStatesAsync(string X_XSRF_TOKEN, long id, MatchUpsertDto matchUpsertDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateMatchAndStatesWithHttpInfoAsync(X_XSRF_TOKEN, id, matchUpsertDto, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update a live match with a new matchState 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_XSRF_TOKEN"></param>
        /// <param name="id">Id of match to update.</param>
        /// <param name="matchUpsertDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> UpdateMatchAndStatesWithHttpInfoAsync(string X_XSRF_TOKEN, long id, MatchUpsertDto matchUpsertDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'X_XSRF_TOKEN' is set
            if (X_XSRF_TOKEN == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_XSRF_TOKEN' when calling MatchApi->UpdateMatchAndStates");
            }

            // verify the required parameter 'matchUpsertDto' is set
            if (matchUpsertDto == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'matchUpsertDto' when calling MatchApi->UpdateMatchAndStates");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-XSRF-TOKEN", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_XSRF_TOKEN)); // header parameter
            localVarRequestOptions.Data = matchUpsertDto;

            localVarRequestOptions.Operation = "MatchApi.UpdateMatchAndStates";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/match/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMatchAndStates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
